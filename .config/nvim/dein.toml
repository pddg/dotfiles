[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
    if dein#util#_is_windows()
        let cmd = 'tools\\update-dll-mingw'
    elseif dein#util#_is_cygwin()
        let cmd = 'make -f make_cygwin.mak'
    elseif executable('gmake')
        let cmd = 'gmake'
    else
        let cmd = 'make'
    endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'jacoborus/tender.vim'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'vim-airline/vim-airline'
depends = ['vim-airline-themes']
hook_add = '''   
    set laststatus=2
    let g:airline_theme = 'deus'
    if has("mac")
        let g:airline_powerline_fonts = 1
    endif
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#buffer_idx_mode = 1
    let g:airline#extensions#virtualenv#enabled = 1
    let g:airline#extensions#whitespace#mixed_indent_algo = 1 	
''' 
[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'prabirshrestha/async.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
    call defx#custom#column('git', 'indicators', {
      \ 'Modified'  : '✹',
      \ 'Staged'    : '✚',
      \ 'Untracked' : '✭',
      \ 'Renamed'   : '➜',
      \ 'Unmerged'  : '═',
      \ 'Ignored'   : '☒',
      \ 'Deleted'   : '✖',
      \ 'Unknown'   : '?'
      \ })
'''

[[plugins]]
repo ="kristijanhusak/defx-icons"
hook_add = '''
    let g:defx_icons_mark_icon = ' ✓'
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = ['defx-git', 'defx-icons']
hook_add = '''
    call defx#custom#option('_', {
          \ 'columns': 'indent:git:icons:space:filename',
          \ 'show_ignored_files': 1,
          \ })

    nnoremap <silent>fi :<C-u>Defx -new `expand('%:p:h')` -search=`expand('%:p')`<CR>
    autocmd FileType defx call s:defx_my_settings()
      function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
        nnoremap <silent><buffer><expr> c defx#do_action('copy')
        nnoremap <silent><buffer><expr> m defx#do_action('move')
        nnoremap <silent><buffer><expr> p defx#do_action('paste')
        nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg0' : 'j'
        nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G0' : 'k'
        nnoremap <silent><buffer><expr> l defx#do_action('open')
        nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d defx#do_action('remove')
        nnoremap <silent><buffer><expr> r defx#do_action('rename')
        nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ; defx#do_action('repeat')
        nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
        nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
      endfunction
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [figitive] <Nop>
    nnoremap <Leader>i [figitive]
    nnoremap <silent> [figitive]s :<C-u>Gstatus<CR>
    nnoremap <silent> [figitive]d :<C-u>Gdiff<CR>
    nnoremap <silent> [figitive]b :<C-u>Gblame<CR>
    set diffopt+=vertical
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['vim-fugitive']

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = """
    " Deniteの設定
    nnoremap [denite] <Nop>
    nmap <C-u> [denite]

    " Change denite default options
    let s:denite_win_width_percent = 0.85
    let s:denite_win_height_percent = 0.7
    call denite#custom#option('default', {
        \ 'split': 'floating',
        \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
        \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
        \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
        \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
        \ 'highlight_filter_background': 'DeniteFilter',
        \ 'start_filter': v:true,
        \ 'prompt': '> ',
        \ })

    " file_rec
    nnoremap <silent> [denite]f :<C-u>Denite file/rec -split=floating<CR>
    " line
    nnoremap <silent> [denite]l :<C-u>Denite line -split=floating<CR>
    " file_rec line
    nnoremap <silent> [denite]e :<C-u>Denite file/rec line -split=floating<CR>
    " defx/history
    nnoremap <silent> [denite]h :<C-u>Denite defx/history -split=floating<CR>
    " menu
    nnoremap <silent> [denite]m :<C-u>Denite menu -start-filter=false<CR>
    " -buffer-name=
    nnoremap <silent> [denite]g  :<C-u>Denite grep -buffer-name=search-buffer-denite -split=floating<CR>

    " Denite grep検索結果を再表示する
    nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite -split=floating<CR>

    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    endfunction
    call denite#custom#var('file/rec', 'command', [
          \ 'ag',
          \ '--follow',
          \ '--ignore-case',
          \ '--nocolor',
          \ '--nogroup',
          \ '-g',
          \ '',
          \ ])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
    let s:menus = {}
    let s:menus.dotfiles = {
    \ 'description': 'Edit dotfiles',
    \ 'file_candidates': [
        \ ['init.vim', '~/.config/nvim/init.vim'],
        \ ['dein.toml', '~/.config/nvim/dein.toml'],
        \ ['dein_lazy.toml', '~/.config/nvim/dein_lazy.toml'],
        \ ['tmux', '~/.tmux.conf'],
        \ ['gitconfig', '~/.gitconfig'],
        \ ['zshrc', '~/.zshrc'],
        \ ['fish_config', '~/.config/fish/config.fish'],
    \ ]
    \ }
    call denite#custom#var('menu', 'menus', s:menus)
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Defx | endif
    autocmd FileType denite set winblend=5
    autocmd FileType denite-filter set winblend=5
"""
hook_post_source = '''
    call denite#custom#source('file/rec', 'matcher', ['matcher_cpsm'])
    "C-N,C-Pで上下移動
    call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'nixprime/cpsm'
build = 'env PY3=ON ./install.sh'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = """
    let g:sonictemplate_vim_template_dir = ['$HOME/.config/nvim/templates']
"""
